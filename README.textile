h1. TRACKS_VISITS

_Rails: Track unique and total visits/viewings of an ActiveRecord resource based on user/account or IP._

h2. Installation

<pre>sudo gem install grimen-tracks_visits</pre>

h2. Usage

1. Generate migration:

<pre>
$ ./script/generate tracks_visits_migration
</pre>

Generates @db/migrations/{timestamp}_tracks_visits_migration@ with:

<pre>
class TracksVisitsMigration < ActiveRecord::Migration
  def self.up
    create_table :visits do |t|
      t.references  :visitable,     :polymorphic => true
      
      t.references  :visitor,       :polymorphic => true
      t.string      :ip,            :limit => 24
      
      t.integer     :visits,        :default => 0
      
      # created_at <=> first_visited_at
      # updated_at <=> last_visited_at
      t.timestamps
    end
    
    add_index :visits, [:visitor_id, :visitor_type]
    add_index :visits, [:visitable_id, :visitable_type]
  end
  
  def self.down
    drop_table :visits
  end
end
</pre>

2. Make your model count visits:

<pre>
class Post < ActiveRecord::Base
  tracks_visits
end
</pre>

or

<pre>
class Post < ActiveRecord::Base
  tracks_visits :by => :user  # Setup associations for the visitor class automatically
end
</pre>

*Note:* @:by@ is optional if you choose any of @User@ or @Account@ as visitor classes.

3. ...and here we go:

<pre>
@post = Post.create

@post.unique_visits    # => 0
@post.total_visits     # => 0

@post.visit!(:ip => '128.0.0.0')
@post.visit!(:visitor => @user)      # aliases: :user, :account

@post.unique_visits    # => 2
@post.total_visits     # => 2

@post.visit!(:ip => '128.0.0.0')
@post.visit!(:visitor => @user)
@post.visit!(:ip => '128.0.0.1')

@post.unique_visits    # => 3
@post.total_visits     # => 5
</pre>

h2. Caching

If the visitable class table - in the sample above @Post@ - contains a columns @total_visits_count@ and @unique_visits_count@, then a cached value will be maintained within it for the number of unique and total visits the object have got. This will save a database query for counting the number of visits, which is a common task.

Additional caching fields:

<pre>
class AddTrackVisitsCachingToPostsMigration < ActiveRecord::Migration
  def self.up
    # Enable tracks_visits-caching.
    add_column :posts, :unique_visits_count, :integer
    add_column :posts, :total_visits_count, :integer
  end
  
  def self.down
    remove_column :posts, :unique_visits_count
    remove_column :posts, :total_visits_count
  end
end
</pre>

h2. Notes

* Tested with Ruby 1.9+. =)
* Let me know if you find any bugs; not used in production yet so consider this a concept version.

h2. TODO

* More thorough tests for more complex scenarios.
* ActiveModel finder helpers.

h2. License

Copyright (c) Jonas Grimfelt, released under the MIT-license.